@page "/SupplierInfo/{Id}"
@page "/SupplierInfo"
@using ProjectAccounting.Models.CustomModels;
@using ProjectAccounting.Models.Models;
@using ProjectAccounting.UI.Services;
@inject NavigationManager NavigationManager
@inject ISupplierService supplierService;
@inject IUserService UserService;
@inject IUserRoleService UserRoleService
@inject IJSRuntime JSRuntime;
<PageTitle></PageTitle>
<h1>Supplier Info</h1>
@*<p role="status">Current count: @currentCount</p>*@
<div class="container fs-6">
    <EditForm class="row g-3" Model="@supplier">
        <div class="col-md-6">
            <label for="inputEmail4" class="form-label">Supplier Code</label>
            <InputText @bind-Value="supplier.SupplerCode" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputPassword4" class="form-label">Supplier Name</label>
            <InputText @bind-Value="supplier.SupplierName" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Owner</label>
            <InputText @bind-Value="supplier.OwnerName" class="form-control" />
        </div>
        <div class="col-6">
            <label for="inputAddress" class="form-label">Type Of Work</label>
            <InputText @bind-Value="supplier.TypeOfWork" class="form-control" />
        </div>
        <div class="col-6">
            <label for="inputAddress2" class="form-label">Bank Account Name</label>
            <InputText @bind-Value="supplier.BranchName" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Account Number</label>
            <InputText @bind-Value="supplier.AccountNo" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Bank name</label>
            <InputText @bind-Value="supplier.BranchName" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Bank Branch</label>
            <InputText @bind-Value="supplier.BranchName" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Contact Number</label>
            <InputText @bind-Value="supplier.Mobile" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Alternate Number</label>
            <InputText @bind-Value="supplier.Telephone" class="form-control"/>
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Fax</label>
            <InputText @bind-Value="supplier.Fax" class="form-control" />
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Email</label>
            <InputText @bind-Value="supplier.Email" class="form-control"/>
        </div>
        <div class="col-md-6">
            <label for="inputCity" class="form-label">Address</label>
            <InputText @bind-Value="supplier.Address" class="form-control" />
        </div>
       
        <div class="col-12">
            <input type="button" class="btn btn-primary" value="Save" @onclick="(()=> AddNew(supplier))">Save</input>
            <input type="button" class="btn btn-success" value="Update" @onclick="(()=> Update(supplier))">Update</input>
            <input type="button" class="btn btn-danger" value="Delete" @onclick="(()=> Delete(supplier))">Delete</input>
            <button type="button" class="btn btn-secondary">Close</button>
        </div>
      </EditForm>
</div>
@code {
    private int currentCount = 0;
    [Parameter]
    public string? Id { get; set; }
    public TblUser User = new TblUser();
    public TblSupplier supplier = new TblSupplier();

    private DateTime StartDt;
    private DateTime Closedt;
    private DateTime Completetiondt;

    protected override async Task OnInitializedAsync()
    {
      
            // currentCount++;
            if (Id != null)
            {

                //await GetUserInfosById(Id);
                await GetSupplierinfoById(Id);
            }
            else
            {

                //await GetSaleCode();
                StartDt = DateTime.Now;
                Closedt = DateTime.Now;
                Completetiondt = DateTime.Now;
                //Sale.Startdate = StartDt;
                //Sale.ClosingDate = Closedt;
                //Sale.ProjectCloseDate = Completetiondt;
            }

            //await GetUserRoles();
            //await GetEmployee();
            //await GetClient();
            //await GetOwners();

            //Sale.IsProjectClose = false;
            this.StateHasChanged();
        
    }
    
    private async Task GetUserInfosById(string Id)
    {
        int ID;
        ID = Convert.ToInt32(Id);
        User = await UserService.GetUserInfosById(ID);
        this.StateHasChanged();
    }
    private async Task GetSupplierinfoById(string Id)
    {
        int ID;
        ID = Convert.ToInt32(Id);
        supplier = await supplierService.GetSupplierById(ID);
        this.StateHasChanged();
    }
    public async void AddNew(TblSupplier supplier)
    {
        var response = await supplierService.AddSupplier(supplier);
        if (response != null)
        {
            //await GetUsers();

            this.StateHasChanged();
            await Alert("Employee Added Successfully");
        }
    }
    public async void Update(TblSupplier supplier)
    {
        var response = await supplierService.UpdateSupplier(supplier);
        if (response != null)
        {
            //await GetUsers();

            this.StateHasChanged();
            await Alert("Em[ployee Update Successfully");
        }
    }
    public async void Delete(TblSupplier supplier)
    {
        //int UserId = Convert.ToInt32(User.Id);
        var response = await supplierService.DeleteSupplier(supplier);
        if (response != null)
        {
            //await GetUsers();

            this.StateHasChanged();
            await Alert("Employee Delete Successfully");
        }

    }
    private async Task Alert(string Message)
    {
        await JSRuntime.InvokeAsync<object>("Alert", Message);
        NavigationManager.NavigateTo("SupplierList");
    }
}
