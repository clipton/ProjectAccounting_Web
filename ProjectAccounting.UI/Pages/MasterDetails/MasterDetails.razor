@page "/MasterDetails/{Id}"
@page "/MasterDetails"
@using ProjectAccounting.Models.CustomModels;
@using ProjectAccounting.Models.Models;
@using ProjectAccounting.UI.Services;
@using Syncfusion.Blazor.DropDowns;
@inject NavigationManager NavigationManager
@inject IMasterService MasterService;
@inject IEmployeeService UserRoleService
@inject IJSRuntime JSRuntime;
<PageTitle>Counter</PageTitle>
<h1>User Info</h1>
<h5>@Id</h5>

<div class="container fs-6 fst-normal">

    <EditForm class="row g-3" Model="@expense">
        <div class="row">
            <div class="form-Group">
                <label>Name</label>
                <InputText @bind-Value="expense.Name" class="form-control" />
            </div>
            <div class="form-Group">
                <label>User Name</label>
                @*<input id="UserName" class="form-control" name="UserName" value="@User.UserName" />*@
                <InputNumber @bind-Value="expense.Age" class="form-control" />

            </div>
            <div class="form-Group">
                <label>Perticulars</label>
                <InputText @bind-Value="eDetail.ChildName" class="form-control" />
            </div>
            <div class="form-Group">
                <label>Quantity</label>
                @*<input id="UserName" class="form-control" name="UserName" value="@User.UserName" />*@
                <InputNumber @bind-Value="eDetail.Age" class="form-control" />

            </div>
            <div class="col-12">

                <input type="button" class="btn btn-primary" value="Ass" @onclick="(()=> Adddetails(eDetail))">Save</input>
                
            </div>
            <div class="col-12">
             
                <input type="button" class="btn btn-primary" value="Save" @onclick="(()=> AddNew(expense))">Save</input>
                <input type="button" class="btn btn-success" value="Update" @onclick="(()=> Update(expense))">Update</input>
                <input type="button" class="btn btn-danger" value="Delete" @onclick="(()=> Delete(expense))">Delete</input>
                <button type="button" class="btn btn-secondary">Close</button>
            </div>
            <div class="form-Group">
                <InputDate @bind-Value="@Dt" class="form-control"></InputDate>
               @* <InputDate @bind-Value="expense.UpdateDate" @bind-Value:format="dd/MM/yyyy" />*@
            </div>
        </div>
    </EditForm>
</div>
@code {
    [Parameter]
    public string? Id { get; set; }
    public Master expense = new Master();

    public Detail eDetail = new Detail();
    private List<Detail> Detailslist = new List<Detail>();
    private List<Master> userlist = new List<Master>();

    private DateTime Dt;
    bool UpdatedisableState;
    bool SavedisableState;

    protected override async Task OnInitializedAsync()
    {
        //await GetUsers();
        if (Id != null)
        { await GetUserInfosById(Id); }

        else
        { //UpdatedisableState = true; SavedisableState = false;

        }
        //SavedisableState = true; UpdatedisableState = false;

        //await GetUserRoles();
        Dt = DateTime.Now;
        this.StateHasChanged();


    }
    //private async Task GetUsers()
    //{
    //    //userlist = await UserService.;
    //}
    //private async Task GetUserRoles()
    //{
    //    TblUserRole objRole = new TblUserRole();
    //    objRole.Id = 0;
    //    objRole.RoleName = "Select Role";

    //    //userRolelist = await UserRoleService.GetUserRoles();
    //    //userRolelist.Add(objRole);
    //    //userRolelist.Reverse();
    //}
    private async Task GetUserInfosById(string Id)
    {
        int ID;
        ID = Convert.ToInt32(Id);

        expense = await MasterService.GetMasterById(ID);
        this.StateHasChanged();
    }
    public async void AddNew(Master expense)
    {


        var response = await MasterService.AddMaster(expense);
        if (response != null)
        {
            //await GetUsers();

            this.StateHasChanged();
            await Alert("master Added Successfully");
        }
    }
    public async void Adddetails(Detail Detail)
    {

        Detailslist.Add(Detail);
        expense.Details = Detailslist;
        //expense.TblExpenseDetails.Add(Detail);
        //var response = await UserService.AddExpence(Detail);
        //if (response != null)
        //{
        //    //await GetUsers();

        //    this.StateHasChanged();
        //    await Alert("Employee Added Successfully");
        //}
    }
    
    public async void Update(Master User)
    {
        var response = await MasterService.UpdateMaster(User);
        if (response != null)
        {
            //await GetUsers();

            this.StateHasChanged();
            await Alert("Em[ployee Update Successfully");
        }
    }
    public async void Delete(Master User)
    {
        //int UserId = Convert.ToInt32(User.Id);
        var response = await MasterService.DeleteMaster(User);
        if (response != null)
        {
            //await GetUsers();

            //this.StateHasChanged();
            await Alert("Employee Delete Successfully");
        }

    }
    private async Task Alert(string Message)
    {
        await JSRuntime.InvokeAsync<object>("Alert", Message);
        NavigationManager.NavigateTo("UserInfos");
    }
    //protected async void ddlUser_Onchange(ChangeEventArgs evt)
    //{
    //    string cityName = evt.Value.ToString();
    //    //this.StateHasChanged();

    //    User.UserRoleId = Convert.ToInt32(evt.Value);
    //}
}
